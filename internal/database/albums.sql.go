// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: albums.sql

package database

import (
	"context"
	"database/sql"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums(id, name, numberOfTracks ,coverImageUrl, releaseDate, artists, spotifyUrl, jsonTrackList )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, name, coverimageurl, releasedate, artists, spotifyurl, jsontracklist, created_on, updated_on, numberoftracks
`

type CreateAlbumParams struct {
	ID             string
	Name           string
	Numberoftracks int32
	Coverimageurl  sql.NullString
	Releasedate    sql.NullString
	Artists        sql.NullString
	Spotifyurl     sql.NullString
	Jsontracklist  sql.NullString
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, createAlbum,
		arg.ID,
		arg.Name,
		arg.Numberoftracks,
		arg.Coverimageurl,
		arg.Releasedate,
		arg.Artists,
		arg.Spotifyurl,
		arg.Jsontracklist,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Coverimageurl,
		&i.Releasedate,
		&i.Artists,
		&i.Spotifyurl,
		&i.Jsontracklist,
		&i.CreatedOn,
		&i.UpdatedOn,
		&i.Numberoftracks,
	)
	return i, err
}

const getAlbumFromSpotifyId = `-- name: GetAlbumFromSpotifyId :one
SELECT id, name, coverimageurl, artists,numberOfTracks FROM albums WHERE ID = $1 LIMIT 1
`

type GetAlbumFromSpotifyIdRow struct {
	ID             string
	Name           string
	Coverimageurl  sql.NullString
	Artists        sql.NullString
	Numberoftracks int32
}

func (q *Queries) GetAlbumFromSpotifyId(ctx context.Context, id string) (GetAlbumFromSpotifyIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAlbumFromSpotifyId, id)
	var i GetAlbumFromSpotifyIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Coverimageurl,
		&i.Artists,
		&i.Numberoftracks,
	)
	return i, err
}
