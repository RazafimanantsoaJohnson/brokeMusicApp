// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: useralbum.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserRecentlyVisitedAlbums = `-- name: GetUserRecentlyVisitedAlbums :many

SELECT id, name, coverimageurl, releasedate, artists, spotifyurl, jsontracklist, created_on, updated_on, numberoftracks FROM albums WHERE id IN (SELECT DISTINCT user_album.albumId FROM user_album WHERE user_album.userId = $1)
`

// SELECT DISTINCT user_album_join.albumId FROM
//
//	(SELECT user_album.albumId, albums.name, albums.id, albums.coverimageurl, albums.releasedate, albums.numberoftracks, user_album.created_on
//	    FROM user_album INNER JOIN albums ON user_album.albumId=albums.id WHERE userId = $1 ORDER BY user_album.created_on DESC) AS user_album_join LIMIT 10;
func (q *Queries) GetUserRecentlyVisitedAlbums(ctx context.Context, userid uuid.NullUUID) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, getUserRecentlyVisitedAlbums, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Coverimageurl,
			&i.Releasedate,
			&i.Artists,
			&i.Spotifyurl,
			&i.Jsontracklist,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.Numberoftracks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveUserVisitedAlbum = `-- name: SaveUserVisitedAlbum :exec
INSERT INTO user_album (id, userId, albumId, isSaved)
VALUES (GEN_RANDOM_UUID(), $1, $2, TRUE)
`

type SaveUserVisitedAlbumParams struct {
	Userid  uuid.NullUUID
	Albumid sql.NullString
}

func (q *Queries) SaveUserVisitedAlbum(ctx context.Context, arg SaveUserVisitedAlbumParams) error {
	_, err := q.db.ExecContext(ctx, saveUserVisitedAlbum, arg.Userid, arg.Albumid)
	return err
}
