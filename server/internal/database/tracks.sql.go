// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tracks.sql

package database

import (
	"context"
	"database/sql"
)

const fetchAlbumTracks = `-- name: FetchAlbumTracks :many
SELECT id, youtubeid, name, spotifyduration, spotifyuri, isexplicit, isavailable, youtubeurltype, youtubeurl, fileurl, albumid, created_on, updated_on, spotifyid, tracknumber FROM tracks WHERE  (albumId = $1)
`

func (q *Queries) FetchAlbumTracks(ctx context.Context, albumid sql.NullString) ([]Track, error) {
	rows, err := q.db.QueryContext(ctx, fetchAlbumTracks, albumid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Youtubeid,
			&i.Name,
			&i.Spotifyduration,
			&i.Spotifyuri,
			&i.Isexplicit,
			&i.Isavailable,
			&i.Youtubeurltype,
			&i.Youtubeurl,
			&i.Fileurl,
			&i.Albumid,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.Spotifyid,
			&i.Tracknumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAlbumTrack = `-- name: InsertAlbumTrack :exec
INSERT INTO tracks (id, isAvailable,name, trackNumber,spotifyId,spotifyDuration, spotifyUri, isExplicit, albumId)
VALUES (GEN_RANDOM_UUID(), TRUE, $1, $2, $3, $4, $5, $6, $7)
`

type InsertAlbumTrackParams struct {
	Name            string
	Tracknumber     sql.NullInt32
	Spotifyid       sql.NullString
	Spotifyduration sql.NullInt32
	Spotifyuri      sql.NullString
	Isexplicit      sql.NullBool
	Albumid         sql.NullString
}

func (q *Queries) InsertAlbumTrack(ctx context.Context, arg InsertAlbumTrackParams) error {
	_, err := q.db.ExecContext(ctx, insertAlbumTrack,
		arg.Name,
		arg.Tracknumber,
		arg.Spotifyid,
		arg.Spotifyduration,
		arg.Spotifyuri,
		arg.Isexplicit,
		arg.Albumid,
	)
	return err
}
