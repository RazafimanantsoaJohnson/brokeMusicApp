// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, email, password, authType)
VALUES (GEN_RANDOM_UUID(), $1, $2, $3) RETURNING id, username, email, password, authtype, created_on, updated_on
`

type CreateUserParams struct {
	Email    string
	Password string
	Authtype string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.Authtype)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Authtype,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}

const fetchUserByEmail = `-- name: FetchUserByEmail :one
SELECT id, username, email, password, authtype, created_on, updated_on FROM users WHERE email= $1 LIMIT 1
`

func (q *Queries) FetchUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, fetchUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Authtype,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}
